<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Song&#39;s Blog</title>
  
  <subtitle>技术 | 杂文</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://codersong.top/"/>
  <updated>2017-12-07T09:32:48.000Z</updated>
  <id>http://codersong.top/</id>
  
  <author>
    <name>songguoping</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android Signature V2 下的多渠道打包</title>
    <link href="http://codersong.top/2017/12/04/Android-Signature-V2.html"/>
    <id>http://codersong.top/2017/12/04/Android-Signature-V2.html</id>
    <published>2017-12-04T11:49:51.000Z</published>
    <updated>2017-12-07T09:32:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="相关背景"><a href="#相关背景" class="headerlink" title="相关背景"></a>相关背景</h2><p>Android7.0 引入一项新的应用签名方案 APK Signnature Scheme v2(以下简称v2),这种新机制使得 apk 的签名方式更加安全，默认情况下,Android Studio2.2 和 Gradle2.2会使用v2签名方案来签名apk。如果使用v2这套签名方案就使得之前用的美团点评多渠道打包方案没用了，当然，美团点评在此基础上推出了新的解决方案 Walle。</p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><ul><li>客户端需要传一个 Channel 字段给服务器；</li><li>在发包时需要使用360加固或者其他的加固方式给 apk 加固；</li><li>apk命名需要自定义；</li><li>批量打包；</li></ul><a id="more"></a><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="使用-v1-的签名方案"><a href="#使用-v1-的签名方案" class="headerlink" title="使用 v1 的签名方案"></a>使用 v1 的签名方案</h3><p>禁用掉 v2，使用 v1。打开<strong>模块级 build.gradle</strong> 文件，配置如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">    signingConfigs&#123;</span><br><span class="line">        release&#123;</span><br><span class="line">             <span class="function">storeFile <span class="title">file</span><span class="params">(<span class="string">"releasekey.keystore"</span>)</span></span></span><br><span class="line"><span class="function">             storePassword "password"</span></span><br><span class="line"><span class="function">             keyAlias "ReleaseKey"</span></span><br><span class="line"><span class="function">             keyPassword "password"</span></span><br><span class="line"><span class="function">             v2SigningEnabled <span class="keyword">false</span></span></span><br><span class="line"><span class="function">        &#125;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="使用-v2-的签名方案"><a href="#使用-v2-的签名方案" class="headerlink" title="使用 v2 的签名方案"></a>使用 v2 的签名方案</h3><p>之前的美团点评的多渠道打包方案无效，我们使用新的解决方案 <a href="https://github.com/Meituan-Dianping/walle" target="_blank" rel="noopener">Walle</a>。如果不使用加固方案的话，直接按照 Walle 的 readme 操作即可，但是使用加固方案后，只能先加固，后签名，在通过 Walle 对这个签名后的 apk 进行多渠道打包，具体操作如下：</p><ol><li><p>先在项目中引用 Walle<br> 在位于<strong>项目的根目录 build.gradle</strong> 文件中添加 Walle Gradle 插件的依赖</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">buildscript&#123;</span><br><span class="line">    dependencies&#123;</span><br><span class="line">        classpath <span class="string">'com.meituan.android.walle:plugin:1.1.5'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 并在<strong>模块级 build.gradle</strong> 文件中apply这个插件，并添加上用于读取渠道号的 AAR</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">'walle'</span></span><br><span class="line">    </span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile <span class="string">'com.meituan.android.walle:library:1.1.5'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 通过以下方式获取渠道信息，并上传给服务器</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ChannelInfo channelInfo= WalleChannelReader.getChannelInfo(<span class="keyword">this</span>.getApplicationContext());</span><br><span class="line"><span class="keyword">if</span> (channelInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">    String channel = channelInfo.getChannel();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 至此，在项目中的配置就算完成了，如果想插入一些额外的信息或者要对 Walle 进行更多的配置，请参考 Walle 的 readme。配置完成后，通过 assembleRelease 命令生成使用v2签名方式的 apk。</p></li><li><p>拿这个 apk 去加固<strong>生成未签名的加固包</strong>。之后使用python工具去批量打自定义名称的渠道包。</p><p> <strong>channel.txt</strong>：渠道信息</p><p> <strong>config.py</strong>：配置签名信息以及 Android sdk 路径。</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#Windows 下路径分割线请注意使用\\转义</span><br><span class="line">keystorePath = &quot;&quot;</span><br><span class="line">keyAlias = &quot;&quot;</span><br><span class="line">keystorePassword = &quot;&quot;</span><br><span class="line">keyPassword = &quot;&quot;</span><br><span class="line"></span><br><span class="line">#Android SDK buidtools path , please use above 25.0+</span><br><span class="line">sdkBuildToolPath = &quot;&quot;</span><br></pre></td></tr></table></figure></code></pre><p> <strong>MultiChannelBuildTool.py</strong>：基本思路就是遍历放置在同文件夹内的 apk 文件(将生成的未签名的加固包放置此处)。使用 v2 签名该 apk，然后将签名成功的 apk 通过 Walle 的命令行工具写入渠道等信息。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python  </span><br><span class="line"># -*-coding:utf-8-*-</span><br><span class="line">import zipfile</span><br><span class="line">import shutil</span><br><span class="line">import os</span><br><span class="line">import sys</span><br><span class="line">import platform</span><br><span class="line">import config</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 获取脚本文件的当前路径</span><br><span class="line">def curFileDir():</span><br><span class="line">    # 获取脚本路径</span><br><span class="line">    path = sys.path[0]</span><br><span class="line">    # 判断为脚本文件还是py2exe编译后的文件，</span><br><span class="line">    # 如果是脚本文件，则返回的是脚本的目录，</span><br><span class="line">    # 如果是编译后的文件，则返回的是编译后的文件路径</span><br><span class="line">    if os.path.isdir(path):</span><br><span class="line">        return path</span><br><span class="line">    elif os.path.isfile(path):</span><br><span class="line">        return os.path.dirname(path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 判断当前系统</span><br><span class="line">def isWindows():</span><br><span class="line">    sysstr = platform.system()</span><br><span class="line">    if (&quot;Windows&quot; in sysstr):</span><br><span class="line">        return 1</span><br><span class="line">    else:</span><br><span class="line">        return 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 兼容不同系统的路径分隔符</span><br><span class="line">def getBackslash():</span><br><span class="line">    if (isWindows() == 1):</span><br><span class="line">        return &quot;\\&quot;</span><br><span class="line">    else:</span><br><span class="line">        return &quot;/&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 获取当前目录中所有的apk源包</span><br><span class="line">src_apks = []</span><br><span class="line"># python3 : os.listdir()即可，这里使用兼容Python2的os.listdir(&apos;.&apos;)</span><br><span class="line">for file in os.listdir(&apos;.&apos;):</span><br><span class="line">    if os.path.isfile(file):</span><br><span class="line">        if &quot;.apk&quot; in file:</span><br><span class="line">            src_apks.append(file)</span><br><span class="line"></span><br><span class="line"># 获取渠道列表</span><br><span class="line">channel_file = &apos;channel.txt&apos;</span><br><span class="line">f = open(channel_file)</span><br><span class="line">lines = f.readlines()</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"># 当前脚本文件所在目录</span><br><span class="line">parentPath = curFileDir() + getBackslash()</span><br><span class="line"># config</span><br><span class="line">libPath = parentPath + &quot;lib&quot; + getBackslash()</span><br><span class="line">buildToolsPath = config.sdkBuildToolPath + getBackslash()</span><br><span class="line">checkAndroidV2SignaturePath = libPath + &quot;CheckAndroidV2Signature.jar&quot;</span><br><span class="line">walleChannelWritterPath = libPath + &quot;walle-cli-all.jar&quot;</span><br><span class="line">keystorePath = config.keystorePath</span><br><span class="line">keyAlias = config.keyAlias</span><br><span class="line">keystorePassword = config.keystorePassword</span><br><span class="line">keyPassword = config.keyPassword</span><br><span class="line"></span><br><span class="line">for src_apk in src_apks:</span><br><span class="line">    # 原包路径</span><br><span class="line">    protectedSourceApkPath = parentPath + src_apk</span><br><span class="line"></span><br><span class="line">zipalignedApkPath = protectedSourceApkPath[0: -4] + &quot;_aligned.apk&quot;</span><br><span class="line">signedApkPath = zipalignedApkPath[0: -4] + &quot;_signed.apk&quot;</span><br><span class="line"></span><br><span class="line"># 对齐</span><br><span class="line">zipalignShell = buildToolsPath + &quot;zipalign -v 4 &quot; + protectedSourceApkPath + &quot; &quot; + zipalignedApkPath</span><br><span class="line">os.system(zipalignShell)</span><br><span class="line"></span><br><span class="line"># 签名</span><br><span class="line">signShell = buildToolsPath + &quot;apksigner sign --ks &quot; + keystorePath + &quot; --ks-key-alias &quot; + keyAlias + &quot; --ks-pass pass:&quot; + keystorePassword + &quot; --key-pass pass:&quot; + keyPassword + &quot; --out &quot; + signedApkPath + &quot; &quot; + zipalignedApkPath</span><br><span class="line">os.system(signShell)</span><br><span class="line"></span><br><span class="line"># 检查V2签名是否正确</span><br><span class="line">checkV2Shell = &quot;java -jar &quot; + checkAndroidV2SignaturePath + &quot; &quot; + signedApkPath</span><br><span class="line">os.system(checkV2Shell)</span><br><span class="line"></span><br><span class="line"># file name (with extension)</span><br><span class="line">src_apk_file_name = os.path.basename(src_apk)</span><br><span class="line"># 分割文件名与后缀</span><br><span class="line">temp_list = os.path.splitext(src_apk_file_name)</span><br><span class="line"># name without extension</span><br><span class="line">src_apk_name = temp_list[0]</span><br><span class="line"># 后缀名&quot;.apk &quot;</span><br><span class="line">src_apk_extension = temp_list[1]</span><br><span class="line"># 创建生成目录,与文件名相关</span><br><span class="line">output_dir = src_apk_name + &apos;android_&apos; + &quot;1-&#123;channels&#125;&quot;.format(channels=len(lines)) + &apos;/&apos;</span><br><span class="line"># 目录不存在则创建</span><br><span class="line">if not os.path.exists(output_dir):</span><br><span class="line">    os.mkdir(output_dir)</span><br><span class="line"></span><br><span class="line"># 遍历渠道号并创建对应渠道号的apk文件</span><br><span class="line">for line in lines:</span><br><span class="line">    # 获取当前渠道号，因为从渠道文件中获得带有\n,所有strip一下</span><br><span class="line">    target_channel = line.strip()</span><br><span class="line">    # 拼接对应渠道号的apk</span><br><span class="line">    target_apk = output_dir + src_apk_name + src_apk_extension</span><br><span class="line">    # 将签名后的apk拷贝建立新apk</span><br><span class="line">    shutil.copy(signedApkPath, target_apk)</span><br><span class="line">    writeChannelShell = &quot;java -jar &quot; + walleChannelWritterPath + &quot; put -c &quot; + target_channel + &quot; &quot; + target_apk</span><br><span class="line">    os.system(writeChannelShell)</span><br></pre></td></tr></table></figure></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p>Walle: <a href="https://github.com/Meituan-Dianping/walle" target="_blank" rel="noopener">https://github.com/Meituan-Dianping/walle</a><br>Jay-Goo: <a href="https://github.com/Jay-Goo/ProtectedApkResignerForWalle" target="_blank" rel="noopener">https://github.com/Jay-Goo/ProtectedApkResignerForWalle</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      本文主要解决 v2 签名方案下的多渠道打包问题，利用 Walle 批量打可以自定义文件名的 apk
    
    </summary>
    
    
      <category term="Android" scheme="http://codersong.top/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>韦</title>
    <link href="http://codersong.top/2017/11/28/I.html"/>
    <id>http://codersong.top/2017/11/28/I.html</id>
    <published>2017-11-28T09:29:14.000Z</published>
    <updated>2017-11-30T07:21:55.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="I-love-you"><a href="#I-love-you" class="headerlink" title="I love you"></a>I love you</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;I-love-you&quot;&gt;&lt;a href=&quot;#I-love-you&quot; class=&quot;headerlink&quot; title=&quot;I love you&quot;&gt;&lt;/a&gt;I love you&lt;/h2&gt;
      
    
    </summary>
    
      <category term="韦" scheme="http://codersong.top/categories/%E9%9F%A6/"/>
    
    
      <category term="-韦" scheme="http://codersong.top/tags/%E9%9F%A6/"/>
    
  </entry>
  
  <entry>
    <title>爱</title>
    <link href="http://codersong.top/2017/11/28/Love.html"/>
    <id>http://codersong.top/2017/11/28/Love.html</id>
    <published>2017-11-28T09:28:14.000Z</published>
    <updated>2017-11-30T07:06:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="I-love-you"><a href="#I-love-you" class="headerlink" title="I love you"></a>I love you</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;I-love-you&quot;&gt;&lt;a href=&quot;#I-love-you&quot; class=&quot;headerlink&quot; title=&quot;I love you&quot;&gt;&lt;/a&gt;I love you&lt;/h2&gt;
      
    
    </summary>
    
      <category term="爱" scheme="http://codersong.top/categories/%E7%88%B1/"/>
    
    
      <category term="爱" scheme="http://codersong.top/tags/%E7%88%B1/"/>
    
  </entry>
  
  <entry>
    <title>念</title>
    <link href="http://codersong.top/2017/11/28/you.html"/>
    <id>http://codersong.top/2017/11/28/you.html</id>
    <published>2017-11-28T09:27:14.000Z</published>
    <updated>2017-11-30T07:20:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="I-love-you"><a href="#I-love-you" class="headerlink" title="I love you"></a>I love you</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;I-love-you&quot;&gt;&lt;a href=&quot;#I-love-you&quot; class=&quot;headerlink&quot; title=&quot;I love you&quot;&gt;&lt;/a&gt;I love you&lt;/h2&gt;
      
    
    </summary>
    
      <category term="念" scheme="http://codersong.top/categories/%E5%BF%B5/"/>
    
    
      <category term="念" scheme="http://codersong.top/tags/%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>I</title>
    <link href="http://codersong.top/2017/11/28/%E5%BF%B5.html"/>
    <id>http://codersong.top/2017/11/28/念.html</id>
    <published>2017-11-28T09:26:14.000Z</published>
    <updated>2017-11-30T07:06:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="I-love-you"><a href="#I-love-you" class="headerlink" title="I love you"></a>I love you</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;I-love-you&quot;&gt;&lt;a href=&quot;#I-love-you&quot; class=&quot;headerlink&quot; title=&quot;I love you&quot;&gt;&lt;/a&gt;I love you&lt;/h2&gt;
      
    
    </summary>
    
      <category term="I" scheme="http://codersong.top/categories/I/"/>
    
    
      <category term="I" scheme="http://codersong.top/tags/I/"/>
    
  </entry>
  
  <entry>
    <title>Love</title>
    <link href="http://codersong.top/2017/11/28/%E7%88%B1.html"/>
    <id>http://codersong.top/2017/11/28/爱.html</id>
    <published>2017-11-28T09:25:14.000Z</published>
    <updated>2017-11-30T07:06:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="I-love-you"><a href="#I-love-you" class="headerlink" title="I love you"></a>I love you</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;I-love-you&quot;&gt;&lt;a href=&quot;#I-love-you&quot; class=&quot;headerlink&quot; title=&quot;I love you&quot;&gt;&lt;/a&gt;I love you&lt;/h2&gt;
      
    
    </summary>
    
      <category term="Love" scheme="http://codersong.top/categories/Love/"/>
    
    
      <category term="-Love" scheme="http://codersong.top/tags/Love/"/>
    
  </entry>
  
  <entry>
    <title>you</title>
    <link href="http://codersong.top/2017/11/28/%E9%9F%A6.html"/>
    <id>http://codersong.top/2017/11/28/韦.html</id>
    <published>2017-11-28T09:24:14.000Z</published>
    <updated>2017-11-30T07:19:51.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="I-love-you"><a href="#I-love-you" class="headerlink" title="I love you"></a>I love you</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;I-love-you&quot;&gt;&lt;a href=&quot;#I-love-you&quot; class=&quot;headerlink&quot; title=&quot;I love you&quot;&gt;&lt;/a&gt;I love you&lt;/h2&gt;
      
    
    </summary>
    
      <category term="you" scheme="http://codersong.top/categories/you/"/>
    
    
      <category term="you" scheme="http://codersong.top/tags/you/"/>
    
  </entry>
  
</feed>
