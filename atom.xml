<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Song&#39;s Blog</title>
  
  <subtitle>技术 | 杂文</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://codersong.top/"/>
  <updated>2017-12-14T08:01:42.000Z</updated>
  <id>http://codersong.top/</id>
  
  <author>
    <name>songguoping</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用 hexo-theme-next 搭建博客（二）</title>
    <link href="http://codersong.top/2017-12-14/build-blog-two.html"/>
    <id>http://codersong.top/2017-12-14/build-blog-two.html</id>
    <published>2017-12-14T14:40:51.000Z</published>
    <updated>2017-12-14T08:01:42.000Z</updated>
    
    <content type="html"><![CDATA[<p id="div-border-top-blue"><br>本系列文章旨在教会你通过 next 主题搭建自己的 hexo 博客，跟着本系列完成后你的博客将会具备以下几个功能：<br>- 强调精于心，简于形的 next 主题，也可以很方便的定制和扩展；<br>- Hexo同时部署在 Coding 和 GitHub 上并使用 DNSPod 分流;<br>- LeanCloud 为文章添加阅读量统计功能，并在首页可以显示，不蒜子实现站内 UV PV 等统计；<br>- 百度统计；<br>- 站内搜索功能；<br>- RSS;<br>- 代码高亮，社交链接，打赏，动画等功能；<br>- 评论系统，可以匿名评论；<br>- ……<br></p><p><a href="/2017-12-13/build-blog-one.html">上一篇文章</a>我们主要介绍 Hexo 的本地站点的搭建以及使用 next 主题，本章节主要介绍把博客部署在 <code>GitHub page</code> 和 <code>Coding Page</code> 上，并配置自己的域名访问。</p><h2 id="部署到-GitHub"><a href="#部署到-GitHub" class="headerlink" title="部署到 GitHub"></a>部署到 GitHub</h2><h3 id="创建-Repository"><a href="#创建-Repository" class="headerlink" title="创建 Repository"></a>创建 Repository</h3><p>登录 GitHub 账号后，在首页右上角会有 New repository 按钮，点击后进入如下界面：<br><img src="http://p0ufe2pi4.bkt.clouddn.com/build-blog-two/github_new_repository.png" alt="github_new_repository"></p><p id="div-border-left-green">- repository name 一定要填 Owner.github.io，例如：songguoping.github.io<br>- 项目一定是 Public<br></p><h3 id="安装-Git-部署器"><a href="#安装-Git-部署器" class="headerlink" title="安装 Git 部署器"></a>安装 Git 部署器</h3><p>在终端执行以下命令；<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git –save</span><br></pre></td></tr></table></figure></p><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>打开 <span id="inline-blue">站点配置文件</span>，搜索 <code>deploy</code>，修改如下配置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: </span><br><span class="line">      github: https://github.com/songguoping/songguoping.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>在站点目录下执行以下命令，即可将博客部署到 GitHub 上：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></p><p>部署成功以后，在浏览器中输入 <code>http://Repository name</code>，例如 <a href="http://songguoping.github.io" target="_blank" rel="noopener">http://songguoping.github.io</a> 即可在线浏览自己的博客啦</p><h2 id="部署到-Coding"><a href="#部署到-Coding" class="headerlink" title="部署到 Coding"></a>部署到 Coding</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>没有 Coding 账号的先注册账号，然后新建项目，具体如图：<br><img src="http://p0ufe2pi4.bkt.clouddn.com/build-blog-two/coding_new_repository.png" alt="coding_new_repository"></p><p id="div-border-left-green">- 项目名称和个人名称必须一致<br>- 项目必须是公开的</p><h3 id="修改配置文件-1"><a href="#修改配置文件-1" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>打开 <span id="inline-blue">站点配置文件</span>，搜索 <code>deploy</code>，修改如下配置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: </span><br><span class="line">      github: https://github.com/songguoping/songguoping.github.io.git</span><br><span class="line">      coding: https://git.coding.net/codersong/codersong.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><p>配置完成后，使用 <code>hexo d -g</code> 命令重新生成博客并部署到 GitHub 和 Coding 上去。</p><h3 id="为博客绑定个人域名"><a href="#为博客绑定个人域名" class="headerlink" title="为博客绑定个人域名"></a>为博客绑定个人域名</h3><h4 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h4><p>你需要在<a href="www.net.cn">万网</a>上购买一个域名，笔者购买的域名是：codersong.top</p><h4 id="解析域名"><a href="#解析域名" class="headerlink" title="解析域名"></a>解析域名</h4><p>找一个域名解析的提供商，使用它的DNS解析服务，此处推荐 <a href="https://www.dnspod.cn" target="_blank" rel="noopener">DNSPod</a><br>在your-hexo-site/source/路径下创建一个名为 <code>CNAME</code> 的文件<code>(没有扩展名)</code>,如下图所示：<br><img src="http://p0ufe2pi4.bkt.clouddn.com/build-blog-two/cname.png" alt="cname"><br>使用文本编辑器打开 <code>CNAME</code> 文件，在首行添加个人域名信息，如：codersong.top<br>完成以上步骤后，重新执行命令 <code>hexo d -g</code> 部署。</p><h3 id="通过-DNSPod-配置-DNS-流量分发"><a href="#通过-DNSPod-配置-DNS-流量分发" class="headerlink" title="通过 DNSPod 配置 DNS 流量分发"></a>通过 DNSPod 配置 DNS 流量分发</h3><p>注册账号登陆 DNSPod，在自己的域名下添加四条记录：</p><p id="div-border-top-blue">添加一个主机记录为 <code>@</code>，记录类型为 <code>CNAME</code>，线路类型为 <code>国内</code>，记录值为 <code>xxx.coding.me</code>(例如：songguoping.coding.me)的记录；</p><br><p id="div-border-top-blue">添加一个主机记录为 <code>www</code>，记录类型为 <code>CNAME</code>，线路类型为 <code>国内</code>，记录值为 <code>xxx.coding.me</code>(例如：songguoping.coding.me)的记录；</p><br><p id="div-border-top-blue">添加一个主机记录为 <code>@</code>，记录类型为 <code>CNAME</code>，线路类型为 <code>默认</code>，记录值为 <code>xxx.github.io</code>(例如：songguoping.github.io)的记录；</p><br><p id="div-border-top-blue">添加一个主机记录为 <code>@</code>，记录类型为 <code>CNAME</code>，线路类型为 <code>国内</code>，记录值为 <code>xxx.github.io</code>(例如：songguoping.github.io)的记录；</p><br>如下图所示：<br><img src="http://p0ufe2pi4.bkt.clouddn.com/build-blog-two/dnspod.png" alt="dnspod"><br><p id="div-border-left-green">主机记录为 @ 允许用户以 codersong.top 访问你的博客；主机记录为 www 允许用户以 www.codersong.top 访问你的博客</p><h3 id="配置-Coding-Pages"><a href="#配置-Coding-Pages" class="headerlink" title="配置 Coding Pages"></a>配置 Coding Pages</h3><h4 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h4><p>如下图所示：<br><img src="http://p0ufe2pi4.bkt.clouddn.com/build-blog-two/coding_yuming.png" alt="coding_yuming"></p><p id="div-border-left-green">域名可以绑定最多5个，一定要选<code>首选</code>的域名，并且非首选域名要勾选<code>跳转至首选</code>域名不然有些第三方服务数据会统计不到一起</p><h4 id="强制-https-访问"><a href="#强制-https-访问" class="headerlink" title="强制 https 访问"></a>强制 https 访问</h4><p><img src="http://p0ufe2pi4.bkt.clouddn.com/build-blog-two/coding_https.png" alt="coding_https"></p><p id="div-border-left-green">- 先要验证，验证完成后如图<br>- 打开强制 https 访问的开关，这时访问你的博客都是 https 了</p><h4 id="屏蔽掉-Coding-跳转页"><a href="#屏蔽掉-Coding-跳转页" class="headerlink" title="屏蔽掉 Coding 跳转页"></a>屏蔽掉 Coding 跳转页</h4><p>将博客部署 Coding 后，访问你的博客首先会跳到 Coding 的一个页面，这样不利于 seo 优化，我们要屏蔽掉这个跳转页，如下图所示：<br><img src="http://p0ufe2pi4.bkt.clouddn.com/build-blog-two/coding_page_service.png" alt="coding_page_service"><br>将文字版的代码放置到 <code>themes/next/layout/_partials/footer.swig</code> 中，可以替换掉 Hexo 的内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.footer.powered %&#125;</span><br><span class="line">  &lt;div class=<span class="string">"powered-by"</span>&gt;Hosted by &lt;a rel=<span class="string">"external nofollow"</span> href=<span class="string">"https://pages.coding.me"</span> style=<span class="string">"font-weight: bold"</span>&gt;Coding Pages&lt;/a&gt;&lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p><p>代码配置完成后，勾选上图的<code>已放置 Hosted by Coding Pages</code>，等待通过审核。</p><p>通过 DNSPod 完成流量分发后，然后 Github 和 Coding 上完成各自的配置就可以将自己的域名与 Github page 和 Coding page 绑定起来。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本章节我们主要介绍了如何把博客部署在 GitHub page 和 Coding Page 上，注册了自己的域名，通过 DNSpod 配置DNS流量分发，<a href="/2017-12-13/build-blog-two.html">下一章节</a>主要介绍 NexT 的主题配置、第三方服务以及动画的实现。</p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="部署失败"><a href="#部署失败" class="headerlink" title="部署失败"></a>部署失败</h3><p>检查 SSH 公钥是否配置</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p>lijiankun24: <a href="http://lijiankun24.com/" target="_blank" rel="noopener">http://lijiankun24.com/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      本章节主要介绍把博客部署在 GitHub page 和 Coding Page 上，并配置自己的域名访问
    
    </summary>
    
    
      <category term="Hexo" scheme="http://codersong.top/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>使用 hexo-theme-next 搭建博客（一）</title>
    <link href="http://codersong.top/2017-12-13/build-blog-one.html"/>
    <id>http://codersong.top/2017-12-13/build-blog-one.html</id>
    <published>2017-12-13T12:30:13.000Z</published>
    <updated>2017-12-14T07:59:19.000Z</updated>
    
    <content type="html"><![CDATA[<p id="div-border-top-blue"><br>本系列文章旨在教会你通过 next 主题搭建自己的 hexo 博客，跟着本系列完成后你的博客将会具备以下几个功能：<br>- 强调精于心，简于形的 next 主题，也可以很方便的定制和扩展；<br>- Hexo 同时部署在 Coding 和 GitHub 上并使用 DNSPod 分流;<br>- LeanCloud 为文章添加阅读量统计功能，并在首页可以显示，不蒜子实现站内 UV PV 等统计；<br>- 百度统计；<br>- 站内搜索功能；<br>- RSS;<br>- 代码高亮，社交链接，打赏，动画等功能；<br>- 评论系统，可以匿名评论；<br>- ……<br></p><h2 id="软件环境"><a href="#软件环境" class="headerlink" title="软件环境"></a>软件环境</h2><ul><li>Mac OS</li><li>Git</li><li>Node.js</li></ul><h2 id="本地站点搭建"><a href="#本地站点搭建" class="headerlink" title="本地站点搭建"></a>本地站点搭建</h2><h3 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h3><blockquote><p>Windows：下载安装 git 。<a id="download" href="https://git-scm.com/download/win" target="_blank" rel="noopener"><i class="fa fa-download"></i><span> Download git</span></a><br>Mac：使用 <a href="http://mxcl.github.com/homebrew/" target="_blank" rel="noopener">Homebrew</a>，<a href="http://www.macports.org/" target="_blank" rel="noopener">MacPorts</a> 或下载 <a href="http://sourceforge.net/projects/git-osx-installer/" target="_blank" rel="noopener">安装程序</a> 安装</p></blockquote><h3 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h3><p>下载安装 Node.js。<a id="download" href="https://nodejs.org/en/#download" target="_blank" rel="noopener"><i class="fa fa-download"></i><span> Download Node.js</span></a>,点击安装各个系统的版本，无脑的下一步即可完成安装。node.js 安装完成后，npm 也被安装完成。检测是否安装成功可以在终端输入命令查看 node.js 和 npm 的版本号。<br>如下图所示：<br><img src="http://p0ufe2pi4.bkt.clouddn.com/build-blog-one/node_version.png" alt="node_version"></p><h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p><p>输入以下命令查看 Hexo 的版本号：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo -v</span><br></pre></td></tr></table></figure></p><p>如下图所示：<br><img src="http://p0ufe2pi4.bkt.clouddn.com/build-blog-one/hexo_version.png" alt="hexo_version"></p><h3 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h3><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件并拉取所需要的依赖。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">$ hexo init </span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure></p><p>如下图所示：<br><img src="http://p0ufe2pi4.bkt.clouddn.com/build-blog-one/hexo_init.png" alt="hexo_init"><br>新建完成后，指定文件夹的目录如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml <span class="comment"># 网站的配置信息，在此称为站点配置文件，往后主题目录下也有相同命名的文件，称为主题配置文件</span></span><br><span class="line">├── package.json <span class="comment"># 应用程序的信息</span></span><br><span class="line">├── scaffolds <span class="comment"># 模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</span></span><br><span class="line">├── <span class="built_in">source</span> <span class="comment"># 资源文件夹是存放用户资源的地方。</span></span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes <span class="comment"># 主题 文件夹。Hexo 会根据主题来生成静态页面。</span></span><br></pre></td></tr></table></figure></p><p>执行以下命令，生成静态页面：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure></p><p>执行以下命令，启动服务：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure></p><p>如下图所示：<br><img src="http://p0ufe2pi4.bkt.clouddn.com/build-blog-one/hexo_server.png" alt="hexo_server"><br>打开浏览器，输入 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>，即可在本地查看基于 Hexo 的默认主题的原型：<br><img src="http://p0ufe2pi4.bkt.clouddn.com/build-blog-one/hexo_index.png" alt="hexo_index"></p><h3 id="安装-NexT"><a href="#安装-NexT" class="headerlink" title="安装 NexT"></a>安装 NexT</h3><p>Hexo 安装主题的方式非常简单，只需要将主题文件拷贝至站点目录的 themes 目录下， 然后修改下配置文件即可。具体到 NexT 来说，安装步骤如下。<br>在终端窗口下，定位到 Hexo 站点目录下。使用 <code>git checkout</code> 代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> your-hexo-site</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></p><p>如下图所示：<br><img src="http://p0ufe2pi4.bkt.clouddn.com/build-blog-one/git_clone_next.png" alt="next_clone"><br>当 克隆/下载 完成后，打开 <span id="inline-blue">站点配置文件</span>， 找到 <code>theme</code> 字段，并将其值更改为 <code>next</code>。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure></p><p>启动 Hexo 本地站点，并开启调试模式（即加上 –debug），整个命令是 <code>hexo s --debug</code>，在启动之前，我们最好使用 <code>hexo clean</code> 来清除 Hexo 的缓存。<br>当你看到站点的外观与下图所示类似时即说明你已成功安装 NexT 主题。这是 NexT 默认的 Scheme —— Muse<br><img src="http://p0ufe2pi4.bkt.clouddn.com/build-blog-one/hexo_index.png" alt="next_muse"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本章节主要介绍 Hexo 的本地站点的搭建以及使用 next 主题，<a href="/2017-12-14/build-blog-two.html">下一章节</a>主要介绍把博客部署在 Github page 和 Coding Page 上，并配置自己的域名访问。</p><h3 id="Hexo-基本指令"><a href="#Hexo-基本指令" class="headerlink" title="Hexo 基本指令"></a>Hexo 基本指令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init <span class="comment"># 新建一个网站</span></span><br><span class="line">$ hexo new [layout] &lt;title&gt; <span class="comment"># 新建一篇文章</span></span><br><span class="line">$ hexo generate <span class="comment"># 生成静态文件，部署时可以使用 hexo g -d</span></span><br><span class="line">$ hexo publish [layout] &lt;filename&gt; <span class="comment"># 发表草稿</span></span><br><span class="line">$ hexo server <span class="comment"># 启动服务器</span></span><br><span class="line">$ hexo deploy <span class="comment"># 部署网站</span></span><br><span class="line">$ hexo clean <span class="comment"># 清除缓存文件 (db.json) 和已生成的静态文件 (public)</span></span><br></pre></td></tr></table></figure><h3 id="简写命令"><a href="#简写命令" class="headerlink" title="简写命令"></a>简写命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new == hexo n</span><br><span class="line">$ hexo generate == hexo g</span><br><span class="line">$ hexo server == hexo s</span><br><span class="line">$ hexo deploy == hexo d</span><br></pre></td></tr></table></figure><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ul><li>注意在配置文件中，冒号后面要留一个空格，要不然配置不生效</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p>hexo doc: <a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/</a><br>Never_yu’s Blog: <a href="https://neveryu.github.io/2016/09/03/hexo-next-one/" target="_blank" rel="noopener">https://neveryu.github.io/2016/09/03/hexo-next-one/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      本系列文章旨在教会你通过 next 主题搭建自己的 hexo 博客，本章节主要介绍 Hexo 的本地站点的搭建以及使用 next 主题
    
    </summary>
    
    
      <category term="Hexo" scheme="http://codersong.top/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Android Signature V2 下的多渠道打包</title>
    <link href="http://codersong.top/2017-12-04/Android-Signature-V2.html"/>
    <id>http://codersong.top/2017-12-04/Android-Signature-V2.html</id>
    <published>2017-12-04T11:49:51.000Z</published>
    <updated>2017-12-13T09:59:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="相关背景"><a href="#相关背景" class="headerlink" title="相关背景"></a>相关背景</h2><p>Android7.0 引入一项新的应用签名方案 APK Signnature Scheme v2(以下简称 v2 ),这种新机制使得 apk 的签名方式更加安全，默认情况下,<code>Android Studio2.2</code> 和 <code>Gradle2.2</code> 会使用 v2 签名方案来签名 apk。如果使用 v2 这套签名方案就使得之前用的美团点评多渠道打包方案没用了，当然，美团点评在此基础上推出了新的解决方案 Walle。</p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><ul><li>客户端需要传一个 Channel 字段给服务器；</li><li>在发包时需要使用 360 加固或者其他的加固方式给 apk 加固；</li><li>apk 命名需要自定义；</li><li>批量打包；</li></ul><a id="more"></a><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="使用-v1-的签名方案"><a href="#使用-v1-的签名方案" class="headerlink" title="使用 v1 的签名方案"></a>使用 v1 的签名方案</h3><p>禁用掉 v2，使用 v1。打开<code>模块级 build.gradle</code> 文件，配置如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">    signingConfigs&#123;</span><br><span class="line">        release&#123;</span><br><span class="line">             <span class="function">storeFile <span class="title">file</span><span class="params">(<span class="string">"releasekey.keystore"</span>)</span></span></span><br><span class="line"><span class="function">             storePassword "password"</span></span><br><span class="line"><span class="function">             keyAlias "ReleaseKey"</span></span><br><span class="line"><span class="function">             keyPassword "password"</span></span><br><span class="line"><span class="function">             v2SigningEnabled <span class="keyword">false</span></span></span><br><span class="line"><span class="function">        &#125;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="使用-v2-的签名方案"><a href="#使用-v2-的签名方案" class="headerlink" title="使用 v2 的签名方案"></a>使用 v2 的签名方案</h3><p>之前的美团点评的多渠道打包方案无效，我们使用新的解决方案 <a href="https://github.com/Meituan-Dianping/walle" target="_blank" rel="noopener">Walle</a>。如果不使用加固方案的话，直接按照 Walle 的 readme 操作即可，但是使用加固方案后，只能先加固，后签名，在通过 Walle 对这个签名后的 apk 进行多渠道打包，具体操作如下：</p><h4 id="先在项目中引用-Walle"><a href="#先在项目中引用-Walle" class="headerlink" title="先在项目中引用 Walle"></a>先在项目中引用 Walle</h4><p>在位于<code>项目的根目录 build.gradle</code> 文件中添加 <code>Walle Gradle</code> 插件的依赖<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">buildscript&#123;</span><br><span class="line">    dependencies&#123;</span><br><span class="line">        classpath <span class="string">'com.meituan.android.walle:plugin:1.1.5'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>并在<code>模块级 build.gradle</code> 文件中 apply 这个插件，并添加上用于读取渠道号的 AAR<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">'walle'</span></span><br><span class="line">    </span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile <span class="string">'com.meituan.android.walle:library:1.1.5'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过以下方式获取渠道信息，并上传给服务器<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ChannelInfo channelInfo= WalleChannelReader.getChannelInfo(<span class="keyword">this</span>.getApplicationContext());</span><br><span class="line"><span class="keyword">if</span> (channelInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">    String channel = channelInfo.getChannel();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>至此，在项目中的配置就算完成了，如果想插入一些额外的信息或者要对 Walle 进行更多的配置，请参考 Walle 的 readme。配置完成后，通过 <code>assembleRelease</code> 命令生成使用v2签名方式的 apk。</p><h4 id="python-工具打自定义名称的渠道包"><a href="#python-工具打自定义名称的渠道包" class="headerlink" title="python 工具打自定义名称的渠道包"></a>python 工具打自定义名称的渠道包</h4><p>拿这个 apk 去加固<code>生成未签名的加固包</code>。之后使用 python 工具去批量打自定义名称的渠道包。<br><strong>channel.txt</strong>：渠道信息<br><strong>config.py</strong>：配置签名信息以及 Android sdk 路径。<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#Windows 下路径分割线请注意使用\\转义</span><br><span class="line">keystorePath = &quot;&quot;</span><br><span class="line">keyAlias = &quot;&quot;</span><br><span class="line">keystorePassword = &quot;&quot;</span><br><span class="line">keyPassword = &quot;&quot;</span><br><span class="line"></span><br><span class="line">#Android SDK buidtools path , please use above 25.0+</span><br><span class="line">sdkBuildToolPath = &quot;&quot;</span><br></pre></td></tr></table></figure></p><p><strong>MultiChannelBuildTool.py</strong>：基本思路就是遍历放置在同文件夹内的 apk 文件(将生成的未签名的加固包放置此处)。使用 v2 签名该 apk，然后将签名成功的 apk 通过 Walle 的命令行工具写入渠道等信息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python  </span><br><span class="line"># -*-coding:utf-8-*-</span><br><span class="line">import zipfile</span><br><span class="line">import shutil</span><br><span class="line">import os</span><br><span class="line">import sys</span><br><span class="line">import platform</span><br><span class="line">import config</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 获取脚本文件的当前路径</span><br><span class="line">def curFileDir():</span><br><span class="line">    # 获取脚本路径</span><br><span class="line">    path = sys.path[0]</span><br><span class="line">    # 判断为脚本文件还是py2exe编译后的文件，</span><br><span class="line">    # 如果是脚本文件，则返回的是脚本的目录，</span><br><span class="line">    # 如果是编译后的文件，则返回的是编译后的文件路径</span><br><span class="line">    if os.path.isdir(path):</span><br><span class="line">        return path</span><br><span class="line">    elif os.path.isfile(path):</span><br><span class="line">        return os.path.dirname(path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 判断当前系统</span><br><span class="line">def isWindows():</span><br><span class="line">    sysstr = platform.system()</span><br><span class="line">    if (&quot;Windows&quot; in sysstr):</span><br><span class="line">        return 1</span><br><span class="line">    else:</span><br><span class="line">        return 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 兼容不同系统的路径分隔符</span><br><span class="line">def getBackslash():</span><br><span class="line">    if (isWindows() == 1):</span><br><span class="line">        return &quot;\\&quot;</span><br><span class="line">    else:</span><br><span class="line">        return &quot;/&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 获取当前目录中所有的apk源包</span><br><span class="line">src_apks = []</span><br><span class="line"># python3 : os.listdir()即可，这里使用兼容Python2的os.listdir(&apos;.&apos;)</span><br><span class="line">for file in os.listdir(&apos;.&apos;):</span><br><span class="line">    if os.path.isfile(file):</span><br><span class="line">        if &quot;.apk&quot; in file:</span><br><span class="line">            src_apks.append(file)</span><br><span class="line"></span><br><span class="line"># 获取渠道列表</span><br><span class="line">channel_file = &apos;channel.txt&apos;</span><br><span class="line">f = open(channel_file)</span><br><span class="line">lines = f.readlines()</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"># 当前脚本文件所在目录</span><br><span class="line">parentPath = curFileDir() + getBackslash()</span><br><span class="line"># config</span><br><span class="line">libPath = parentPath + &quot;lib&quot; + getBackslash()</span><br><span class="line">buildToolsPath = config.sdkBuildToolPath + getBackslash()</span><br><span class="line">checkAndroidV2SignaturePath = libPath + &quot;CheckAndroidV2Signature.jar&quot;</span><br><span class="line">walleChannelWritterPath = libPath + &quot;walle-cli-all.jar&quot;</span><br><span class="line">keystorePath = config.keystorePath</span><br><span class="line">keyAlias = config.keyAlias</span><br><span class="line">keystorePassword = config.keystorePassword</span><br><span class="line">keyPassword = config.keyPassword</span><br><span class="line"></span><br><span class="line">for src_apk in src_apks:</span><br><span class="line">    # 原包路径</span><br><span class="line">    protectedSourceApkPath = parentPath + src_apk</span><br><span class="line"></span><br><span class="line">zipalignedApkPath = protectedSourceApkPath[0: -4] + &quot;_aligned.apk&quot;</span><br><span class="line">signedApkPath = zipalignedApkPath[0: -4] + &quot;_signed.apk&quot;</span><br><span class="line"></span><br><span class="line"># 对齐</span><br><span class="line">zipalignShell = buildToolsPath + &quot;zipalign -v 4 &quot; + protectedSourceApkPath + &quot; &quot; + zipalignedApkPath</span><br><span class="line">os.system(zipalignShell)</span><br><span class="line"></span><br><span class="line"># 签名</span><br><span class="line">signShell = buildToolsPath + &quot;apksigner sign --ks &quot; + keystorePath + &quot; --ks-key-alias &quot; + keyAlias + &quot; --ks-pass pass:&quot; + keystorePassword + &quot; --key-pass pass:&quot; + keyPassword + &quot; --out &quot; + signedApkPath + &quot; &quot; + zipalignedApkPath</span><br><span class="line">os.system(signShell)</span><br><span class="line"></span><br><span class="line"># 检查V2签名是否正确</span><br><span class="line">checkV2Shell = &quot;java -jar &quot; + checkAndroidV2SignaturePath + &quot; &quot; + signedApkPath</span><br><span class="line">os.system(checkV2Shell)</span><br><span class="line"></span><br><span class="line"># file name (with extension)</span><br><span class="line">src_apk_file_name = os.path.basename(src_apk)</span><br><span class="line"># 分割文件名与后缀</span><br><span class="line">temp_list = os.path.splitext(src_apk_file_name)</span><br><span class="line"># name without extension</span><br><span class="line">src_apk_name = temp_list[0]</span><br><span class="line"># 后缀名&quot;.apk &quot;</span><br><span class="line">src_apk_extension = temp_list[1]</span><br><span class="line"># 创建生成目录,与文件名相关</span><br><span class="line">output_dir = src_apk_name + &apos;android_&apos; + &quot;1-&#123;channels&#125;&quot;.format(channels=len(lines)) + &apos;/&apos;</span><br><span class="line"># 目录不存在则创建</span><br><span class="line">if not os.path.exists(output_dir):</span><br><span class="line">    os.mkdir(output_dir)</span><br><span class="line"></span><br><span class="line"># 遍历渠道号并创建对应渠道号的apk文件</span><br><span class="line">for line in lines:</span><br><span class="line">    # 获取当前渠道号，因为从渠道文件中获得带有\n,所有strip一下</span><br><span class="line">    target_channel = line.strip()</span><br><span class="line">    # 拼接对应渠道号的apk</span><br><span class="line">    target_apk = output_dir + src_apk_name + src_apk_extension</span><br><span class="line">    # 将签名后的apk拷贝建立新apk</span><br><span class="line">    shutil.copy(signedApkPath, target_apk)</span><br><span class="line">    writeChannelShell = &quot;java -jar &quot; + walleChannelWritterPath + &quot; put -c &quot; + target_channel + &quot; &quot; + target_apk</span><br><span class="line">    os.system(writeChannelShell)</span><br></pre></td></tr></table></figure></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p>Walle: <a href="https://github.com/Meituan-Dianping/walle" target="_blank" rel="noopener">https://github.com/Meituan-Dianping/walle</a><br>Jay-Goo: <a href="https://github.com/Jay-Goo/ProtectedApkResignerForWalle" target="_blank" rel="noopener">https://github.com/Jay-Goo/ProtectedApkResignerForWalle</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      本文主要解决 v2 签名方案下的多渠道打包问题，利用 Walle 批量打可以自定义文件名的 apk
    
    </summary>
    
    
      <category term="Android" scheme="http://codersong.top/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>韦</title>
    <link href="http://codersong.top/2017-11-28/I.html"/>
    <id>http://codersong.top/2017-11-28/I.html</id>
    <published>2017-11-28T09:29:14.000Z</published>
    <updated>2017-12-11T07:46:55.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="I-love-you"><a href="#I-love-you" class="headerlink" title="I love you"></a>I love you</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;I-love-you&quot;&gt;&lt;a href=&quot;#I-love-you&quot; class=&quot;headerlink&quot; title=&quot;I love you&quot;&gt;&lt;/a&gt;I love you&lt;/h2&gt;
      
    
    </summary>
    
      <category term="韦" scheme="http://codersong.top/categories/%E9%9F%A6/"/>
    
    
      <category term="-韦" scheme="http://codersong.top/tags/%E9%9F%A6/"/>
    
  </entry>
  
  <entry>
    <title>爱</title>
    <link href="http://codersong.top/2017-11-28/Love.html"/>
    <id>http://codersong.top/2017-11-28/Love.html</id>
    <published>2017-11-28T09:28:14.000Z</published>
    <updated>2017-12-11T07:46:55.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="I-love-you"><a href="#I-love-you" class="headerlink" title="I love you"></a>I love you</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;I-love-you&quot;&gt;&lt;a href=&quot;#I-love-you&quot; class=&quot;headerlink&quot; title=&quot;I love you&quot;&gt;&lt;/a&gt;I love you&lt;/h2&gt;
      
    
    </summary>
    
      <category term="爱" scheme="http://codersong.top/categories/%E7%88%B1/"/>
    
    
      <category term="爱" scheme="http://codersong.top/tags/%E7%88%B1/"/>
    
  </entry>
  
  <entry>
    <title>念</title>
    <link href="http://codersong.top/2017-11-28/you.html"/>
    <id>http://codersong.top/2017-11-28/you.html</id>
    <published>2017-11-28T09:27:14.000Z</published>
    <updated>2017-12-11T07:46:55.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="I-love-you"><a href="#I-love-you" class="headerlink" title="I love you"></a>I love you</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;I-love-you&quot;&gt;&lt;a href=&quot;#I-love-you&quot; class=&quot;headerlink&quot; title=&quot;I love you&quot;&gt;&lt;/a&gt;I love you&lt;/h2&gt;
      
    
    </summary>
    
      <category term="念" scheme="http://codersong.top/categories/%E5%BF%B5/"/>
    
    
      <category term="念" scheme="http://codersong.top/tags/%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>I</title>
    <link href="http://codersong.top/2017-11-28/%E5%BF%B5.html"/>
    <id>http://codersong.top/2017-11-28/念.html</id>
    <published>2017-11-28T09:26:14.000Z</published>
    <updated>2017-12-11T07:46:55.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="I-love-you"><a href="#I-love-you" class="headerlink" title="I love you"></a>I love you</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;I-love-you&quot;&gt;&lt;a href=&quot;#I-love-you&quot; class=&quot;headerlink&quot; title=&quot;I love you&quot;&gt;&lt;/a&gt;I love you&lt;/h2&gt;
      
    
    </summary>
    
      <category term="I" scheme="http://codersong.top/categories/I/"/>
    
    
      <category term="I" scheme="http://codersong.top/tags/I/"/>
    
  </entry>
  
  <entry>
    <title>Love</title>
    <link href="http://codersong.top/2017-11-28/%E7%88%B1.html"/>
    <id>http://codersong.top/2017-11-28/爱.html</id>
    <published>2017-11-28T09:25:14.000Z</published>
    <updated>2017-12-11T07:46:55.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="I-love-you"><a href="#I-love-you" class="headerlink" title="I love you"></a>I love you</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;I-love-you&quot;&gt;&lt;a href=&quot;#I-love-you&quot; class=&quot;headerlink&quot; title=&quot;I love you&quot;&gt;&lt;/a&gt;I love you&lt;/h2&gt;
      
    
    </summary>
    
      <category term="Love" scheme="http://codersong.top/categories/Love/"/>
    
    
      <category term="-Love" scheme="http://codersong.top/tags/Love/"/>
    
  </entry>
  
  <entry>
    <title>you</title>
    <link href="http://codersong.top/2017-11-28/%E9%9F%A6.html"/>
    <id>http://codersong.top/2017-11-28/韦.html</id>
    <published>2017-11-28T09:24:14.000Z</published>
    <updated>2017-12-11T07:46:55.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="I-love-you"><a href="#I-love-you" class="headerlink" title="I love you"></a>I love you</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;I-love-you&quot;&gt;&lt;a href=&quot;#I-love-you&quot; class=&quot;headerlink&quot; title=&quot;I love you&quot;&gt;&lt;/a&gt;I love you&lt;/h2&gt;
      
    
    </summary>
    
      <category term="you" scheme="http://codersong.top/categories/you/"/>
    
    
      <category term="you" scheme="http://codersong.top/tags/you/"/>
    
  </entry>
  
</feed>
